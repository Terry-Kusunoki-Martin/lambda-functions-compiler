type token =
  | NUM of (int)
  | ID of (string)
  | END
  | LBRACK
  | RBRACK
  | DEF
  | FST
  | SND
  | ADD1
  | SUB1
  | LPAREN
  | RPAREN
  | LET
  | IN
  | EQUAL
  | COMMA
  | PLUS
  | MINUS
  | TIMES
  | IF
  | COLON
  | ELSECOLON
  | TRUE
  | FALSE
  | ISBOOL
  | ISPAIR
  | ISNUM
  | LAMBDA
  | EQEQ
  | LESS
  | GREATER
  | PRINT
  | EOF

open Parsing;;
let _ = parse_error;;
# 2 "parser.mly"
open Expr

# 42 "parser.ml"
let yytransl_const = [|
  259 (* END *);
  260 (* LBRACK *);
  261 (* RBRACK *);
  262 (* DEF *);
  263 (* FST *);
  264 (* SND *);
  265 (* ADD1 *);
  266 (* SUB1 *);
  267 (* LPAREN *);
  268 (* RPAREN *);
  269 (* LET *);
  270 (* IN *);
  271 (* EQUAL *);
  272 (* COMMA *);
  273 (* PLUS *);
  274 (* MINUS *);
  275 (* TIMES *);
  276 (* IF *);
  277 (* COLON *);
  278 (* ELSECOLON *);
  279 (* TRUE *);
  280 (* FALSE *);
  281 (* ISBOOL *);
  282 (* ISPAIR *);
  283 (* ISNUM *);
  284 (* LAMBDA *);
  285 (* EQEQ *);
  286 (* LESS *);
  287 (* GREATER *);
  288 (* PRINT *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  257 (* NUM *);
  258 (* ID *);
    0|]

let yylhs = "\255\255\
\002\000\002\000\002\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\004\000\004\000\006\000\006\000\007\000\
\007\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
\008\000\008\000\009\000\009\000\009\000\009\000\009\000\009\000\
\009\000\005\000\005\000\005\000\001\000\000\000"

let yylen = "\002\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\003\000\005\000\001\000\003\000\001\000\
\003\000\004\000\005\000\004\000\003\000\006\000\005\000\003\000\
\001\000\001\000\003\000\003\000\003\000\003\000\003\000\003\000\
\001\000\004\000\006\000\001\000\002\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\001\000\026\000\010\000\011\000\004\000\005\000\
\000\000\000\000\000\000\002\000\003\000\007\000\009\000\008\000\
\006\000\038\000\025\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\037\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\024\000\000\000\000\000\000\000\000\000\000\000\021\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\034\000\000\000\018\000\000\000\
\020\000\015\000\023\000\000\000\019\000\000\000\000\000\017\000\
\022\000\013\000\035\000"

let yydgoto = "\002\000\
\018\000\019\000\020\000\027\000\048\000\040\000\049\000\022\000\
\023\000"

let yysindex = "\002\000\
\129\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\063\255\002\255\129\255\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\252\254\008\000\003\255\249\254\254\254\
\246\254\250\254\004\255\251\254\129\255\000\000\102\255\027\255\
\027\255\027\255\027\255\027\255\027\255\001\255\129\255\255\254\
\000\000\129\255\129\255\129\255\129\255\013\255\000\000\010\255\
\015\255\003\255\003\255\003\255\003\255\003\255\003\255\028\255\
\019\255\129\255\020\255\023\255\000\000\018\255\000\000\129\255\
\000\000\000\000\000\000\030\255\000\000\002\255\129\255\000\000\
\000\000\000\000\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\001\000\132\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\024\255\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\032\255\
\000\000\021\000\041\000\061\000\081\000\101\000\121\000\000\000\
\000\000\000\000\000\000\041\255\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000"

let yygindex = "\000\000\
\000\000\000\000\000\000\242\255\004\000\007\000\249\255\111\000\
\000\000"

let yytablesize = 410
let yytable = "\038\000\
\033\000\041\000\001\000\026\000\021\000\042\000\029\000\030\000\
\043\000\032\000\033\000\034\000\025\000\031\000\028\000\045\000\
\056\000\044\000\039\000\058\000\027\000\035\000\036\000\037\000\
\063\000\064\000\065\000\003\000\004\000\038\000\067\000\069\000\
\046\000\005\000\006\000\007\000\008\000\009\000\070\000\071\000\
\028\000\073\000\057\000\016\000\014\000\059\000\060\000\061\000\
\062\000\012\000\013\000\014\000\015\000\016\000\012\000\074\000\
\072\000\000\000\017\000\000\000\029\000\068\000\066\000\003\000\
\004\000\000\000\000\000\000\000\000\000\005\000\006\000\007\000\
\008\000\009\000\075\000\010\000\000\000\000\000\000\000\000\000\
\030\000\000\000\011\000\000\000\000\000\012\000\013\000\014\000\
\015\000\016\000\024\000\000\000\000\000\000\000\017\000\000\000\
\000\000\000\000\000\000\000\000\031\000\000\000\003\000\004\000\
\000\000\000\000\000\000\000\000\005\000\006\000\007\000\008\000\
\009\000\047\000\010\000\000\000\000\000\000\000\000\000\000\000\
\032\000\011\000\000\000\000\000\012\000\013\000\014\000\015\000\
\016\000\003\000\004\000\036\000\000\000\017\000\000\000\005\000\
\006\000\007\000\008\000\009\000\000\000\010\000\050\000\051\000\
\052\000\053\000\054\000\055\000\011\000\000\000\000\000\012\000\
\013\000\014\000\015\000\016\000\000\000\000\000\000\000\000\000\
\017\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\033\000\000\000\033\000\000\000\
\033\000\033\000\033\000\033\000\000\000\033\000\033\000\000\000\
\000\000\000\000\000\000\000\000\000\000\033\000\033\000\033\000\
\027\000\000\000\027\000\000\000\027\000\027\000\027\000\027\000\
\000\000\027\000\027\000\000\000\000\000\000\000\000\000\000\000\
\000\000\027\000\027\000\027\000\028\000\000\000\028\000\000\000\
\028\000\028\000\028\000\028\000\000\000\028\000\028\000\000\000\
\000\000\000\000\000\000\000\000\000\000\028\000\028\000\028\000\
\029\000\000\000\029\000\000\000\029\000\029\000\029\000\029\000\
\000\000\029\000\029\000\000\000\000\000\000\000\000\000\000\000\
\000\000\029\000\029\000\029\000\030\000\000\000\030\000\000\000\
\030\000\030\000\030\000\030\000\000\000\030\000\030\000\000\000\
\000\000\000\000\000\000\000\000\000\000\030\000\030\000\030\000\
\031\000\000\000\031\000\000\000\031\000\031\000\031\000\031\000\
\000\000\031\000\031\000\000\000\000\000\000\000\000\000\000\000\
\000\000\031\000\031\000\031\000\032\000\000\000\032\000\000\000\
\032\000\032\000\032\000\032\000\000\000\032\000\032\000\036\000\
\000\000\036\000\000\000\036\000\000\000\032\000\032\000\032\000\
\036\000\036\000"

let yycheck = "\002\001\
\000\000\012\001\001\000\002\001\001\000\016\001\011\001\000\000\
\015\001\017\001\018\001\019\001\009\000\011\001\011\000\021\001\
\016\001\014\001\021\001\021\001\000\000\029\001\030\001\031\001\
\012\001\016\001\012\001\001\001\002\001\002\001\012\001\012\001\
\029\000\007\001\008\001\009\001\010\001\011\001\016\001\022\001\
\000\000\012\001\039\000\012\001\021\001\042\000\043\000\044\000\
\045\000\023\001\024\001\025\001\026\001\027\001\014\001\070\000\
\064\000\255\255\032\001\255\255\000\000\058\000\056\000\001\001\
\002\001\255\255\255\255\255\255\255\255\007\001\008\001\009\001\
\010\001\011\001\071\000\013\001\255\255\255\255\255\255\255\255\
\000\000\255\255\020\001\255\255\255\255\023\001\024\001\025\001\
\026\001\027\001\028\001\255\255\255\255\255\255\032\001\255\255\
\255\255\255\255\255\255\255\255\000\000\255\255\001\001\002\001\
\255\255\255\255\255\255\255\255\007\001\008\001\009\001\010\001\
\011\001\012\001\013\001\255\255\255\255\255\255\255\255\255\255\
\000\000\020\001\255\255\255\255\023\001\024\001\025\001\026\001\
\027\001\001\001\002\001\000\000\255\255\032\001\255\255\007\001\
\008\001\009\001\010\001\011\001\255\255\013\001\032\000\033\000\
\034\000\035\000\036\000\037\000\020\001\255\255\255\255\023\001\
\024\001\025\001\026\001\027\001\255\255\255\255\255\255\255\255\
\032\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\012\001\255\255\014\001\255\255\
\016\001\017\001\018\001\019\001\255\255\021\001\022\001\255\255\
\255\255\255\255\255\255\255\255\255\255\029\001\030\001\031\001\
\012\001\255\255\014\001\255\255\016\001\017\001\018\001\019\001\
\255\255\021\001\022\001\255\255\255\255\255\255\255\255\255\255\
\255\255\029\001\030\001\031\001\012\001\255\255\014\001\255\255\
\016\001\017\001\018\001\019\001\255\255\021\001\022\001\255\255\
\255\255\255\255\255\255\255\255\255\255\029\001\030\001\031\001\
\012\001\255\255\014\001\255\255\016\001\017\001\018\001\019\001\
\255\255\021\001\022\001\255\255\255\255\255\255\255\255\255\255\
\255\255\029\001\030\001\031\001\012\001\255\255\014\001\255\255\
\016\001\017\001\018\001\019\001\255\255\021\001\022\001\255\255\
\255\255\255\255\255\255\255\255\255\255\029\001\030\001\031\001\
\012\001\255\255\014\001\255\255\016\001\017\001\018\001\019\001\
\255\255\021\001\022\001\255\255\255\255\255\255\255\255\255\255\
\255\255\029\001\030\001\031\001\012\001\255\255\014\001\255\255\
\016\001\017\001\018\001\019\001\255\255\021\001\022\001\012\001\
\255\255\014\001\255\255\016\001\255\255\029\001\030\001\031\001\
\021\001\022\001"

let yynames_const = "\
  END\000\
  LBRACK\000\
  RBRACK\000\
  DEF\000\
  FST\000\
  SND\000\
  ADD1\000\
  SUB1\000\
  LPAREN\000\
  RPAREN\000\
  LET\000\
  IN\000\
  EQUAL\000\
  COMMA\000\
  PLUS\000\
  MINUS\000\
  TIMES\000\
  IF\000\
  COLON\000\
  ELSECOLON\000\
  TRUE\000\
  FALSE\000\
  ISBOOL\000\
  ISPAIR\000\
  ISNUM\000\
  LAMBDA\000\
  EQEQ\000\
  LESS\000\
  GREATER\000\
  PRINT\000\
  EOF\000\
  "

let yynames_block = "\
  NUM\000\
  ID\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 21 "parser.mly"
        ( ENumber(_1) )
# 295 "parser.ml"
               : 'const))
; (fun __caml_parser_env ->
    Obj.repr(
# 22 "parser.mly"
         ( EBool(true) )
# 301 "parser.ml"
               : 'const))
; (fun __caml_parser_env ->
    Obj.repr(
# 23 "parser.mly"
          ( EBool(false) )
# 307 "parser.ml"
               : 'const))
; (fun __caml_parser_env ->
    Obj.repr(
# 26 "parser.mly"
         ( Add1 )
# 313 "parser.ml"
               : 'prim1))
; (fun __caml_parser_env ->
    Obj.repr(
# 27 "parser.mly"
         ( Sub1 )
# 319 "parser.ml"
               : 'prim1))
; (fun __caml_parser_env ->
    Obj.repr(
# 28 "parser.mly"
          ( Print )
# 325 "parser.ml"
               : 'prim1))
; (fun __caml_parser_env ->
    Obj.repr(
# 29 "parser.mly"
           ( IsBool )
# 331 "parser.ml"
               : 'prim1))
; (fun __caml_parser_env ->
    Obj.repr(
# 30 "parser.mly"
          ( IsNum )
# 337 "parser.ml"
               : 'prim1))
; (fun __caml_parser_env ->
    Obj.repr(
# 31 "parser.mly"
           ( IsPair )
# 343 "parser.ml"
               : 'prim1))
; (fun __caml_parser_env ->
    Obj.repr(
# 32 "parser.mly"
        ( Fst )
# 349 "parser.ml"
               : 'prim1))
; (fun __caml_parser_env ->
    Obj.repr(
# 33 "parser.mly"
        ( Snd )
# 355 "parser.ml"
               : 'prim1))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 36 "parser.mly"
                  ( [(_1, _3)] )
# 363 "parser.ml"
               : 'binds))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'binds) in
    Obj.repr(
# 37 "parser.mly"
                              ( (_1, _3)::_5 )
# 372 "parser.ml"
               : 'binds))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 40 "parser.mly"
       ( [_1] )
# 379 "parser.ml"
               : 'ids))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'ids) in
    Obj.repr(
# 41 "parser.mly"
                 ( _1::_3 )
# 387 "parser.ml"
               : 'ids))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 44 "parser.mly"
         ( [_1] )
# 394 "parser.ml"
               : 'exprs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exprs) in
    Obj.repr(
# 45 "parser.mly"
                     ( _1::_3 )
# 402 "parser.ml"
               : 'exprs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'prim1) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 48 "parser.mly"
                             ( EPrim1(_1, _3) )
# 410 "parser.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 49 "parser.mly"
                                  ( EPair(_2, _4) )
# 418 "parser.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'simple_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'exprs) in
    Obj.repr(
# 50 "parser.mly"
                                    ( EApp(_1, _3) )
# 426 "parser.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'simple_expr) in
    Obj.repr(
# 51 "parser.mly"
                              ( EApp(_1, []) )
# 433 "parser.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'ids) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 52 "parser.mly"
                                        ( ELambda(_3, _5) )
# 441 "parser.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 53 "parser.mly"
                                    ( ELambda([], _4) )
# 448 "parser.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 54 "parser.mly"
                       ( _2 )
# 455 "parser.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'const) in
    Obj.repr(
# 55 "parser.mly"
          ( _1 )
# 462 "parser.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 56 "parser.mly"
       ( EId(_1) )
# 469 "parser.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'binop_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'simple_expr) in
    Obj.repr(
# 59 "parser.mly"
                                ( EPrim2(Plus, _1, _3) )
# 477 "parser.ml"
               : 'binop_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'binop_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'simple_expr) in
    Obj.repr(
# 60 "parser.mly"
                                 ( EPrim2(Minus, _1, _3) )
# 485 "parser.ml"
               : 'binop_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'binop_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'simple_expr) in
    Obj.repr(
# 61 "parser.mly"
                                 ( EPrim2(Times, _1, _3) )
# 493 "parser.ml"
               : 'binop_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'binop_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'simple_expr) in
    Obj.repr(
# 62 "parser.mly"
                                ( EPrim2(Equal, _1, _3) )
# 501 "parser.ml"
               : 'binop_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'binop_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'simple_expr) in
    Obj.repr(
# 63 "parser.mly"
                                ( EPrim2(Less, _1, _3) )
# 509 "parser.ml"
               : 'binop_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'binop_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'simple_expr) in
    Obj.repr(
# 64 "parser.mly"
                                   ( EPrim2(Greater, _1, _3) )
# 517 "parser.ml"
               : 'binop_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'simple_expr) in
    Obj.repr(
# 65 "parser.mly"
                ( _1 )
# 524 "parser.ml"
               : 'binop_expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'binds) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 68 "parser.mly"
                      ( ELet(_2, _4) )
# 532 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 69 "parser.mly"
                                      ( EIf(_2, _4, _6) )
# 541 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'binop_expr) in
    Obj.repr(
# 70 "parser.mly"
               ( _1 )
# 548 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 72 "parser.mly"
                   ( _1 )
# 555 "parser.ml"
               : Expr.expr))
(* Entry program *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let program (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Expr.expr)
;;
# 75 "parser.mly"

# 582 "parser.ml"
